Nesta aula, aprendemos:

Sobre a API que desenvolveremos ao longo do curso e sobre as classes de domínio dela;
Que, para um método no controller não encaminhar a requisição a uma página JSP, ou Thymeleaf, devemos utilizar a anotação @ResponseBody;
Que o Spring, por padrão, converte os dados no formato JSON, utilizando a biblioteca Jackson;
Que, para não repetir a anotação @ResponseBody em todos os métodos do controller, devemos utilizar a anotação @RestController;
Que, para não precisar reiniciar manualmente o servidor a cada alteração feita no código, basta utilizar o módulo Spring Boot DevTools;
Que não é uma boa prática retornar entidades JPA nos métodos dos controllers, sendo mais indicado retornar classes que seguem o padrão DTO (Data Transfer Object);
Os principais conceitos sobre o modelo arquitetural REST, como recursos, URIs, verbos HTTP, Representações e comunicação stateless.

Nesta aula, aprendemos que:

Para utilizar o JPA no projeto, devemos incluir o módulo Spring Boot Data JPA, que utiliza o Hibernate, por padrão, como sua implementação;
Para configurar o banco de dados da aplicação, devemos adicionar as propriedades do datasource e do JPA no arquivo src/main/resources/application.properties;
Para acessar a página de gerenciamento do banco de dados H2, devemos configurar o console do H2 com propriedades no arquivo src/main/resources/application.properties;
Para mapear as classes de domínio da aplicação como entidade JPA, devemos utilizar as anotações @Entity, @Id, @GeneratedValue, @ManyToOne, @OneToMany e @Enumerated;
Para que o Spring Boot popule automaticamente o banco de dados da aplicação, devemos criar o arquivo src/main/resources/data.sql;
Para criar um Repository, devemos criar uma interface, que herda da interface JPARepository do Spring Data JPA;
Para criar consultas que filtram por atributos da entidade, devemos seguir o padrão de nomenclatura de métodos do Spring, como por exemplo findByCursoNome;
Para criar manualmente a consulta com JPQL, devemos utilizar a anotação @Query;

posso criar um arquivo data.sql no diretório resource
com alguns inserts para que sempre que o projeto for iniciado, inicie com uma massa de dados
Controller advice (interceptor)
Não esquecer de adicionar o jdbc url na console do h2
spring.datasource.url=jdbc:h2:mem:alura-forum

Nesta aula, aprendemos:

Que para evitar repetir a URL em todos os métodos, devemos utilizar a anotação @RequestMapping em cima da classe controller;
Que para mapear requisições do tipo POST, devemos utilizar a anotação @PostMapping;
Que para receber dados enviados no corpo da requisição, a boa prática é criar uma classe que também siga o padrão DTO (Data Transfer Object);
Que a boa prática para métodos que cadastram informações é devolver o código HTTP 201, ao invés do código 200;
Que para montar uma resposta a ser devolvida ao cliente da API, devemos utilizar a classe ResponseEntity do Spring;
Que para testar requisições do tipo POST, precisamos utilizar alguma ferramenta de testes de API Rest;
Como utilizar o Postman para testar uma API Rest;